{"ast":null,"code":"import _defineProperty from \"/Users/user/react/split and delete letters app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/user/react/split and delete letters app/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.nameChangedHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n\n      const person = _objectSpread({}, this.state.persons[personIndex]); // const person = Object.assign({}, this.state.persons[personIndex]);\n\n\n      person.name = event.target.value;\n      const persons = [...this.state.persons];\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.deletePersonHandler = personIndex => {\n      // const persons = this.state.persons.slice();\n      const persons = [...this.state.persons];\n      persons.splice(personIndex, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n  }\n\n  render() {\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = React.createElement(Persons, {\n        persons: this.state.persons,\n        clicked: this.deletePersonHandler,\n        changed: this.nameChangedHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Cockpit, {\n      title: this.props.appTitle,\n      showPersons: this.state.showPersons,\n      persons: this.state.persons,\n      clicked: this.togglePersonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), persons); // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/user/react/split and delete letters app/src/containers/App.js"],"names":["React","Component","App","state","nameChangedHandler","event","id","personIndex","persons","findIndex","p","person","name","target","value","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","showPersons","render","classes","props","appTitle"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB,EADkB;;AAAA,SAK1BC,kBAL0B,GAKL,CAAEC,KAAF,EAASC,EAAT,KAAiB;AACpC,YAAMC,WAAW,GAAG,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,SAAnB,CAA8BC,CAAC,IAAI;AACrD,eAAOA,CAAC,CAACJ,EAAF,KAASA,EAAhB;AACD,OAFmB,CAApB;;AAIA,YAAMK,MAAM,qBACP,KAAKR,KAAL,CAAWK,OAAX,CAAmBD,WAAnB,CADO,CAAZ,CALoC,CASpC;;;AAEAI,MAAAA,MAAM,CAACC,IAAP,GAAcP,KAAK,CAACQ,MAAN,CAAaC,KAA3B;AAEA,YAAMN,OAAO,GAAG,CAAC,GAAG,KAAKL,KAAL,CAAWK,OAAf,CAAhB;AACAA,MAAAA,OAAO,CAACD,WAAD,CAAP,GAAuBI,MAAvB;AAEA,WAAKI,QAAL,CAAe;AAAEP,QAAAA,OAAO,EAAEA;AAAX,OAAf;AACD,KAtByB;;AAAA,SAwB1BQ,mBAxB0B,GAwBFT,WAAF,IAAmB;AACvC;AACA,YAAMC,OAAO,GAAG,CAAC,GAAG,KAAKL,KAAL,CAAWK,OAAf,CAAhB;AACAA,MAAAA,OAAO,CAACS,MAAR,CAAgBV,WAAhB,EAA6B,CAA7B;AACA,WAAKQ,QAAL,CAAe;AAAEP,QAAAA,OAAO,EAAEA;AAAX,OAAf;AACD,KA7ByB;;AAAA,SA+B1BU,oBA/B0B,GA+BH,MAAM;AAC3B,YAAMC,QAAQ,GAAG,KAAKhB,KAAL,CAAWiB,WAA5B;AACA,WAAKL,QAAL,CAAe;AAAEK,QAAAA,WAAW,EAAE,CAACD;AAAhB,OAAf;AACD,KAlCyB;AAAA;;AAoC1BE,EAAAA,MAAM,GAAI;AACR,QAAIb,OAAO,GAAG,IAAd;;AAEA,QAAK,KAAKL,KAAL,CAAWiB,WAAhB,EAA8B;AAC5BZ,MAAAA,OAAO,GAAG,oBAAC,OAAD;AACR,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK,OADZ;AAER,QAAA,OAAO,EAAE,KAAKQ,mBAFN;AAGR,QAAA,OAAO,EAAE,KAAKZ,kBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAV;AAID;;AAED,WACE;AAAK,MAAA,SAAS,EAAEkB,OAAO,CAACpB,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AACE,MAAA,KAAK,EAAE,KAAKqB,KAAL,CAAWC,QADpB;AAEE,MAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWiB,WAF1B;AAGE,MAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWK,OAHtB;AAIE,MAAA,OAAO,EAAE,KAAKU,oBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMGV,OANH,CADF,CAVQ,CAoBR;AACD;;AAzDyB;;AA4D5B,eAAeN,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    \n  }\n\n  nameChangedHandler = ( event, id ) => {\n    const personIndex = this.state.persons.findIndex( p => {\n      return p.id === id;\n    } );\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    // const person = Object.assign({}, this.state.persons[personIndex]);\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState( { persons: persons } );\n  }\n\n  deletePersonHandler = ( personIndex ) => {\n    // const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice( personIndex, 1 );\n    this.setState( { persons: persons } );\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState( { showPersons: !doesShow } );\n  }\n\n  render () {\n    let persons = null;\n\n    if ( this.state.showPersons ) {\n      persons = <Persons\n        persons={this.state.persons}\n        clicked={this.deletePersonHandler}\n        changed={this.nameChangedHandler} />;\n    }\n\n    return (\n      <div className={classes.App}>\n        <Cockpit\n          title={this.props.appTitle}\n          showPersons={this.state.showPersons}\n          persons={this.state.persons}\n          clicked={this.togglePersonsHandler} />\n        {persons}\n      </div>\n    );\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}